/*
 * Created on Jan 12, 2015 by sviglas
 *
 * This is part of the attica project.  Any subsequent modification
 * of the file should retain this disclaimer.
 * 
 * University of Edinburgh, School of Informatics
 */
package org.dejave.attica.engine.operators;

import java.util.Iterator;
import java.util.List;
import java.util.ArrayList;

import org.dejave.attica.model.Relation;
import org.dejave.attica.storage.Tuple;

import org.dejave.attica.storage.RelationIOManager;
import org.dejave.attica.storage.StorageManager;
import org.dejave.attica.storage.StorageManagerException;

import org.dejave.attica.storage.FileUtil;

/**
 * HashGroup: Your implementation of hash-based grouping.
 *
 * @author sviglas
 */
public class HashGroup extends UnaryOperator {
    
    /** The storage manager for this operator. */
    private StorageManager sm;
    
    /** The name of the temporary file for the output. */
    private String outputFile;
	
    /** The manager that undertakes output relation I/O. */
    private RelationIOManager outputMan;
	
    /** The slots that act as the group keys. */
    private int [] slots;
	
    /** Number of partitions to generate (i.e., buffer pool pages and 
     * output files). */
    private int partitions;

    /** Iterator over the output file. */
    private Iterator<Tuple> outputTuples;

    /** Reusable tuple list for returns. */
    private List<Tuple> returnList;

    /** The list of partition files/managers. */
    private List<RelationIOManager> partitionFiles;

    /** The prefix name for all partition files. */
    private String partitionFilePrefix;
    
    /** The current partition being scanned for output. */
    private int currentPartition;
    
    /**
     * Constructs a new hash grouping operator.
     * 
     * @param operator the input operator.
     * @param sm the storage manager.
     * @param slots the indexes of the grouping keys.
     * @param partitions the number of partitions (i.e., files) to be
     * used for grouping.
     * @throws EngineException thrown whenever the grouping operator
     * cannot be properly initialized.
     */
    public HashGroup(Operator operator, StorageManager sm,
		     int [] slots, int partitions) 
	throws EngineException {
        
        super(operator);
        this.sm = sm;
        this.slots = slots;
        this.partitions = partitions;
	currentPartition = 0;
	partitionFiles = new ArrayList<RelationIOManager>(partitions);
        try {
            // create the temporary output files
            initTempFiles();
        }
        catch (StorageManagerException sme) {
            throw new EngineException("Could not instantiate external sort",
                                      sme);
        }
    } // ExternalSort()
	

    /**
     * Initialises the temporary files, according to the number
     * of buffers.
     * 
     * @throws StorageManagerException thrown whenever the temporary
     * files cannot be initialised.
     */
    protected void initTempFiles() throws StorageManagerException {
	try {
	    partitionFilePrefix = FileUtil.createTempFileName();
	    String name;
	    for (int i = 0; i < partitions; i++) {
		name = generatePartitionFileName(i);
		sm.createFile(name);
		partitionFiles.add(new RelationIOManager(sm, getOutputRelation(),
							 name));
	    }
	}
	catch (Exception e) {
	    e.printStackTrace(System.err);
	    throw new StorageManagerException("Could not instantiate temporary "
					      + "files for hash grouping", e);
	}
    } // initTempFiles()

    
    /**
     * Sets up this external sort operator.
     * 
     * @throws EngineException thrown whenever there is something wrong with
     * setting this operator up
     */
    public void setup() throws EngineException {
        returnList = new ArrayList<Tuple>();
        try {
            ////////////////////////////////////////////
            //
            // this is a blocking operator -- store the input
            // in the partition files
            //
            ////////////////////////////////////////////
            
            ////////////////////////////////////////////
            //
            // YOUR CODE GOES HERE
            //
            ////////////////////////////////////////////
            
            ////////////////////////////////////////////
            //
            // the output should reside in multiple
	    // output files; instantiate the first manager
	    // to the first such file
            //
            ////////////////////////////////////////////
            currentPartition = 0;
            outputMan =
		new RelationIOManager(sm, getOutputRelation(),
		        generatePartitionFileName(currentPartition));
            outputTuples = outputMan.tuples().iterator();
        }
        catch (Exception sme) {
            throw new EngineException("Could not store and sort"
                                      + "intermediate files.", sme);
        }
    } // setup()

    
    /**
     * Cleanup after the sort.
     * 
     * @throws EngineException whenever the operator cannot clean up
     * after itself.
     */
    public void cleanup () throws EngineException {
        try {
            for (int i = 0; i < partitions; ++i) {
		sm.deleteFile(generatePartitionFileName(i));
	    }
        }
        catch (StorageManagerException sme) {
            throw new EngineException("Could not clean up final output.", sme);
        }
    } // cleanup()

    
    /**
     * The inner method to retrieve tuples.
     * 
     * @return the newly retrieved tuples.
     * @throws EngineException thrown whenever the next iteration is not 
     * possible.
     */    
    protected List<Tuple> innerGetNext () throws EngineException {
        try {
            returnList.clear();
            if (outputTuples.hasNext()) returnList.add(outputTuples.next());
            else {
		while (++currentPartition < partitions) {
		    outputMan =
			new RelationIOManager(sm, getOutputRelation(),
			    generatePartitionFileName(currentPartition));
		    outputTuples = outputMan.tuples().iterator();
		    if (outputTuples.hasNext()) {
			returnList.add(outputTuples.next());
			break;
		    }
		}
		returnList.add(new EndOfStreamTuple());
	    }
            return returnList;
        }
        catch (Exception sme) {
            throw new EngineException("Could not read tuples " +
                                      "from intermediate file.", sme);
        }
    } // innerGetNext()


    /**
     * Operator class abstract interface -- never called.
     */
    protected List<Tuple> innerProcessTuple(Tuple tuple, int inOp)
	throws EngineException {
        return new ArrayList<Tuple>();
    } // innerProcessTuple()

    
    /**
     * Operator class abstract interface -- sets the ouput relation of
     * this sort operator.
     * 
     * @return this operator's output relation.
     * @throws EngineException whenever the output relation of this
     * operator cannot be set.
     */
    protected Relation setOutputRelation() throws EngineException {
        return new Relation(getInputOperator().getOutputRelation());
    } // setOutputRelation()

    /**
     * Helper method to generate a partition file name.
     *
     * @param i the partition number for which it generated a file
     * name.
     * @return the partition file name corresponding to the given
     * partition number.
     */
    protected String generatePartitionFileName(int i) {
	StringBuilder sb = new StringBuilder();
	sb.append(partitionFilePrefix).append(".").append(i);
	return sb.toString();
    } // generatePartitionFileName()

} // HashGroup
