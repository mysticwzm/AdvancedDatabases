int myCompare(Tuple t1, Tuple t2)
{
	slots = {3, 0, 1, 2};
	for (int i = 0; i < slots.length; i++)
	{
		int x = t1.getValue(slots[i]).CompareTo(t2.getValue(slots[i]));
		if (x != 0)
		{
			return x;
		}
		return 1;
	}
}

sortPages (List<Page> pages, List<string> files)
{
	string tempFile = FileUtil.createTempFileName();
	sm.createFile(tempFile);
	RelationIOManager man = new RelationIOManager(sm, getOutputRelation(), tempFile);
}

Relation rel = getInputOperator().getOutputRelation();
RelationIOManager rio = new RelationIOManager(getStorageManager(), rel, tmp);

int count = 0;
Page[] pages = new Page[buffers];
for (Page p:rio.pages())
{
	pages[count++] = p;
	if (count == buffer)
	{
		//sort pages[buffers] contents
		//write out a run
		count = 0;
	}
}

RelationIOManager[] rio = new RelationIOManager[buffers];

rio[1]-->file[1];
rio[2]-->file[2];

//read one tuple from each rioms[i]
while (!All rioms exhausted)
{
	//pick minimum value
	//write minimum value
	//advance corresponding riom
}

































